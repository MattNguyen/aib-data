%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1212) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1024 512
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1024 512
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.10588235 0.11764706 0.21176471 sc
q
0 0 1024 512 rc
0 512 m
1024 512 l
1024 0 l
0 0 l
h
f
0.60000002 i
0 512 m
1024 512 l
1024 0 l
0 0 l
h
f
Q
0.60000002 i
1 1 1 sc
q
213.33333 223.89822 m
202.80069 234.5645 l
198.7999 230.8322 194.75594 227.87514 190.66521 225.69691 c
186.57806 223.52049 181.68861 222.43228 176.00044 222.43228 c
171.55533 222.43228 167.44481 223.29745 163.66708 225.0314 c
159.88937 226.76535 156.62254 229.14143 153.86659 232.16504 c
151.11066 235.18686 148.97894 238.7195 147.46606 242.76297 c
145.95497 246.80644 145.20123 251.14131 145.20123 255.76036 c
145.20123 260.38303 145.95497 264.69449 147.46606 268.69479 c
148.97894 272.69333 151.11066 276.181 153.86659 279.15964 c
156.62254 282.13647 159.88937 284.49097 163.66708 286.22491 c
167.44481 287.95706 171.55533 288.82404 176.00044 288.82404 c
181.33243 288.82404 186.08876 287.75742 190.26584 285.62415 c
194.44473 283.49271 198.40054 280.69214 202.13148 277.22604 c
212.66594 289.35645 l
210.44427 291.48972 208.08949 293.44489 205.59979 295.22382 c
203.11189 297.00092 200.40094 298.53522 197.4669 299.82309 c
194.53287 301.11276 191.31102 302.11102 187.79953 302.8215 c
184.28806 303.53381 180.3988 303.88995 176.13358 303.88995 c
169.02246 303.88995 162.53377 302.62186 156.66751 300.08929 c
150.79945 297.55673 145.7337 294.09064 141.46667 289.69101 c
137.19965 285.29141 133.88965 280.1597 131.53307 274.29236 c
129.17648 268.42679 128 262.16013 128 255.49416 c
128 248.74005 129.19987 242.43021 131.59962 236.56285 c
133.99937 230.6991 137.31119 225.61058 141.53323 221.2991 c
145.75529 216.98943 150.75447 213.58987 156.53259 211.10048 c
162.3107 208.61108 168.62309 207.36818 175.46617 207.36818 c
179.82315 207.36818 183.80055 207.74591 187.40018 208.50136 c
190.9998 209.25682 194.3116 210.36661 197.33379 211.83255 c
200.35596 213.30029 203.17845 215.03424 205.80127 217.03259 c
208.4223 219.03275 210.93358 221.32248 213.33333 223.89822 c
W*
128 160 768 192 rc
123 308.88995 m
218.33333 308.88995 l
218.33333 202.36818 l
123 202.36818 l
h
f
Q
q
424.90189 277.46442 m
424.90189 280.56903 426.2276 283.20706 428.88089 285.37851 c
431.53238 287.55353 435.24661 288.63925 440.01999 288.63925 c
444.26379 288.63925 448.46289 287.81735 452.61725 286.17709 c
456.77338 284.53687 460.97247 282.16443 465.21448 279.06158 c
473.96689 291.43161 l
469.19528 295.24512 464.08911 298.14874 458.65198 300.14252 c
453.21301 302.13809 447.09241 303.13586 440.28479 303.13586 c
435.68851 303.13586 431.4447 302.49341 427.57663 301.2067 c
423.68704 299.92178 420.3736 298.08234 417.60941 295.68835 c
414.84698 293.2926 412.68036 290.43384 411.08981 287.10849 c
409.52075 283.78314 408.72458 280.0809 408.72458 276.00183 c
408.72458 271.65717 409.40982 267.97647 410.7803 264.96158 c
412.15076 261.94669 414.16174 259.37506 416.77029 257.2467 c
419.37704 255.11833 422.6261 253.34529 426.47095 251.92577 c
430.33902 250.50626 434.73849 249.22313 439.71048 248.06923 c
444.04373 247.00504 447.55579 245.98572 450.27527 245.01126 c
452.9715 244.035 455.09338 242.99236 456.66245 241.8851 c
458.20825 240.77606 459.271 239.55754 459.84531 238.22775 c
460.41962 236.89618 460.70587 235.39052 460.70587 233.70541 c
460.70587 230.06781 459.22629 227.18571 456.26526 225.05914 c
453.30246 222.92897 449.30197 221.86658 444.26379 221.86658 c
438.42947 221.86658 433.21237 222.90923 428.61609 224.99274 c
424.01804 227.07625 419.46649 230.06781 414.95612 233.97101 c
405.14453 222.26498 l
410.71408 217.21144 416.77029 213.46437 423.31134 211.02553 c
429.85419 208.5867 436.70474 207.36818 443.86484 207.36818 c
448.72766 207.36818 453.19333 207.98911 457.26001 209.22916 c
461.30344 210.47281 464.79584 212.29071 467.66916 214.68468 c
470.56396 217.07864 472.81827 220.00381 474.45352 223.46196 c
476.06732 226.92012 476.88495 230.86639 476.88495 235.3008 c
476.88495 239.20221 476.24445 242.59396 474.96164 245.47606 c
473.67883 248.35815 471.77878 250.88312 469.30441 253.05815 c
466.82828 255.22958 463.69016 257.07083 459.93298 258.57828 c
456.17761 260.08392 451.84433 261.45859 446.98148 262.70041 c
442.53909 263.76462 438.89285 264.78574 435.99805 265.76019 c
433.12469 266.73462 430.87039 267.79883 429.21188 268.95273 c
427.57663 270.10486 426.45126 271.34671 425.83041 272.67648 c
425.21317 274.00806 424.90189 275.60345 424.90189 277.46442 c
W*
128 160 768 192 rc
400.14453 308.13586 m
481.88495 308.13586 l
481.88495 202.36818 l
400.14453 202.36818 l
h
f
Q
q
606.42883 276.14676 m
606.42883 209.63042 l
622.63129 209.63042 l
622.63129 302.38177 l
605.23187 302.38177 l
576.94305 258.52322 l
548.65424 302.38177 l
531.25665 302.38177 l
531.25665 209.63042 l
547.45905 209.63042 l
547.45905 275.88217 l
576.54346 232.42049 l
577.07568 232.42049 l
606.42883 276.14676 l
W*
128 160 768 192 rc
526.25665 307.38177 m
627.63129 307.38177 l
627.63129 204.63042 l
526.25665 204.63042 l
h
f
Q
q
758.7619 255.49416 m
758.7619 250.96144 757.98627 246.67334 756.43311 242.62807 c
754.88171 238.58459 752.73065 235.07533 749.97809 232.09848 c
747.22906 229.12164 743.92346 226.76535 740.06482 225.0314 c
736.20441 223.29745 731.96869 222.43228 727.3559 222.43228 c
722.74133 222.43228 718.4823 223.32083 714.57874 225.09795 c
710.67523 226.87686 707.32471 229.27634 704.53082 232.29634 c
701.73694 235.31996 699.56256 238.8526 698.0094 242.89607 c
696.45801 246.93954 695.68054 251.22945 695.68054 255.76036 c
695.68054 260.29489 696.45801 264.58298 698.0094 268.62646 c
699.56256 272.67172 701.71362 276.181 704.46442 279.15964 c
707.21521 282.13647 710.52081 284.49097 714.37946 286.22491 c
718.2381 287.95706 722.47559 288.82404 727.08838 288.82404 c
731.70294 288.82404 735.96198 287.93549 739.86554 286.15659 c
743.76727 284.37946 747.11774 281.97998 749.91162 278.95819 c
752.70734 275.93817 754.88171 272.40372 756.43311 268.36026 c
757.98627 264.31677 758.7619 260.02689 758.7619 255.49416 c
h
775.9292 255.76036 m
775.9292 262.3382 774.73157 268.55991 772.3363 274.42725 c
769.94281 280.29102 766.61389 285.40292 762.35663 289.75757 c
758.0976 294.11401 752.9964 297.55673 747.04956 300.08929 c
741.10626 302.62186 734.54169 303.88995 727.3559 303.88995 c
720.16833 303.88995 713.60376 302.60028 707.65869 300.02274 c
701.71362 297.44519 696.56757 293.95752 692.22052 289.55792 c
687.8717 285.15829 684.50323 280.02481 682.1062 274.15924 c
679.71094 268.2937 678.51324 262.07199 678.51324 255.49416 c
678.51324 248.91812 679.71094 242.69821 682.1062 236.83086 c
684.50323 230.9635 687.82861 225.85341 692.08765 221.49876 c
696.34491 217.1441 701.44788 213.6996 707.39294 211.16704 c
713.33624 208.63446 719.90076 207.36818 727.08838 207.36818 c
734.27417 207.36818 740.84052 208.65785 746.78381 211.23358 c
752.73065 213.81113 757.87494 217.2988 762.22375 221.70021 c
766.5708 226.09802 769.94281 231.23152 772.3363 237.09708 c
774.73157 242.96263 775.9292 249.18433 775.9292 255.76036 c
h
W*
128 160 768 192 rc
673.51324 308.88995 m
780.9292 308.88995 l
780.9292 202.36818 l
673.51324 202.36818 l
h
f
Q
q
844.01691 277.46442 m
844.01691 280.56903 845.34265 283.20706 847.99414 285.37851 c
850.6474 287.55353 854.35986 288.63925 859.13501 288.63925 c
863.37708 288.63925 867.57794 287.81735 871.7323 286.17709 c
875.88666 284.53687 880.08752 282.16443 884.3313 279.06158 c
893.08191 291.43161 l
888.30853 295.24512 883.20239 298.14874 877.7652 300.14252 c
872.32983 302.13809 866.20746 303.13586 859.39984 303.13586 c
854.80359 303.13586 850.55975 302.49341 846.69165 301.2067 c
842.80212 299.92178 839.48865 298.08234 836.72443 295.68835 c
833.96204 293.2926 831.79718 290.43384 830.20306 287.10849 c
828.6358 283.78314 827.8396 280.0809 827.8396 276.00183 c
827.8396 271.65717 828.52484 267.97647 829.89532 264.96158 c
831.26581 261.94669 833.27679 259.37506 835.88354 257.2467 c
838.49207 255.11833 841.74115 253.34529 845.58777 251.92577 c
849.4541 250.50626 853.85352 249.22313 858.8255 248.06923 c
863.15698 247.00504 866.67084 245.98572 869.39032 245.01126 c
872.08472 244.035 874.20844 242.99236 875.77753 241.8851 c
877.3233 240.77606 878.38605 239.55754 878.96033 238.22775 c
879.53467 236.89618 879.82269 235.39052 879.82269 233.70541 c
879.82269 230.06781 878.33954 227.18571 875.38031 225.05914 c
872.41754 222.92897 868.41705 221.86658 863.37708 221.86658 c
857.54272 221.86658 852.32562 222.90923 847.73114 224.99274 c
843.13489 227.07625 838.58154 230.06781 834.07117 233.97101 c
824.25958 222.26498 l
829.82733 217.21144 835.88354 213.46437 842.42639 211.02553 c
848.96741 208.5867 855.81799 207.36818 862.97986 207.36818 c
867.84271 207.36818 872.30658 207.98911 876.37506 209.22916 c
880.41852 210.47281 883.91089 212.29071 886.78418 214.68468 c
889.67902 217.07864 891.93329 220.00381 893.5686 223.46196 c
895.1806 226.92012 896 230.86639 896 235.3008 c
896 239.20221 895.35773 242.59396 894.07666 245.47606 c
892.79388 248.35815 890.89386 250.88312 888.41766 253.05815 c
885.9433 255.22958 882.80518 257.07083 879.04803 258.57828 c
875.29083 260.08392 870.95758 261.45859 866.09656 262.70041 c
861.65411 263.76462 858.00787 264.78574 855.1131 265.76019 c
852.23975 266.73462 849.98547 267.79883 848.3269 268.95273 c
846.69165 270.10486 845.56451 271.34671 844.9455 272.67648 c
844.32825 274.00806 844.01691 275.60345 844.01691 277.46442 c
W*
128 160 768 192 rc
819.25958 308.13586 m
901 308.13586 l
901 202.36818 l
819.25958 202.36818 l
h
f
Q
q
324.48013 283.8139 m
280.08459 239.48042 l
279.51215 240.58961 278.99533 241.74539 278.53235 242.94418 c
276.98193 246.97238 276.2067 251.24606 276.2067 255.75987 c
276.2067 260.27725 276.98193 264.54916 278.53235 268.57736 c
280.08459 272.60733 282.23438 276.10336 284.98352 279.07074 c
287.73267 282.03635 291.03632 284.38193 294.89267 286.10934 c
298.75082 287.83493 302.98401 288.69864 307.59402 288.69864 c
312.20584 288.69864 316.46237 287.81345 320.36179 286.04126 c
321.81174 285.38361 323.18451 284.64175 324.48013 283.8139 c
h
320.56277 225.14699 m
316.70462 223.4196 312.47144 222.55769 307.86142 222.55769 c
303.24957 222.55769 298.99307 223.44289 295.09186 225.21329 c
293.64371 225.87271 292.27094 226.61456 290.97711 227.44421 c
335.37085 271.77411 l
335.9433 270.66672 336.46008 269.51273 336.92307 268.31216 c
338.47351 264.28397 339.24872 260.01025 339.24872 255.49467 c
339.24872 250.97906 338.47351 246.70717 336.92307 242.67719 c
335.37085 238.64899 333.22104 235.15298 330.47189 232.18738 c
327.72275 229.22179 324.4209 226.87439 320.56277 225.14699 c
h
327.27951 211.40131 m
333.22104 213.9691 338.36404 217.4436 342.7085 221.82838 c
347.05295 226.20959 350.42117 231.32368 352.81503 237.16708 c
355.21066 243.01048 356.40759 249.20868 356.40759 255.75987 c
356.40759 262.31287 355.21066 268.51105 352.81503 274.35623 c
351.3956 277.82178 349.64777 281.02213 347.57333 283.95905 c
376.44836 312.79257 l
364.97446 324.25 l
336.01147 295.32867 l
333.41125 297.09909 330.58853 298.62936 327.5451 299.92133 c
321.60358 302.44434 315.04294 303.70761 307.86142 303.70761 c
300.6781 303.70761 294.11746 302.42282 288.1759 299.85504 c
282.23438 297.28723 277.0914 293.81274 272.74695 289.42975 c
268.4025 285.04675 265.03247 279.93265 262.63861 274.08926 c
260.24478 268.24585 259.04785 262.04767 259.04785 255.49467 c
259.04785 248.94347 260.24478 242.74707 262.63861 236.90189 c
264.05984 233.43454 265.80768 230.23421 267.88211 227.29549 c
239.00885 198.46555 l
250.48277 187.00812 l
279.44397 215.92766 l
282.04416 214.15726 284.86688 212.62697 287.91034 211.33501 c
293.85187 208.812 300.41251 207.55051 307.59402 207.55051 c
314.77734 207.55051 321.33798 208.8353 327.27951 211.40131 c
h
W*
128 160 768 192 rc
234.00885 329.25 m
381.44836 329.25 l
381.44836 182.00812 l
234.00885 182.00812 l
h
f
ep
end
%%Trailer
%%EOF
