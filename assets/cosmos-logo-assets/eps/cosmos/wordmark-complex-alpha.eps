%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1212) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1024 512
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1024 512
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: EHUKCF+SFProText-Bold
%!FontType1-1.0: EHUKCF+SFProText-Bold 1.0%%CreationDate: 3/16/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SF Pro Text Bold) readonly def/FamilyName (SF Pro Text) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -277 def/UnderlineThickness 197 defend readonly def/FontName /EHUKCF+SFProText-Bold def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /I putdup 34 /N putdup 35 /T putdup 36 /E putdup 37 /R putdup 38 /space putdup 39 /O putdup 40 /F putdup 41 /B putdup 42 /L putdup 43 /C putdup 44 /K putdup 45 /H putdup 46 /A putdup 47 /S putreadonly def/FontBBox {-611 -1042 2789 2229} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEE57DC78B099C4619B0529F2B3B6EF5A7053AB7ACDB4F96C90A897568020FA8E842C2818088EF387E92B9662D130498D4377B01BF0747D672608EF7D1FCF861768F99217BEC87B93512234548B703458B845EF67C6572302D74CCF2237777553E5647060C5BF279BA644AF96226AE6402347D8D55154A978435F76D407629E974E6F036B1DCBA2784E278BB7F4C5A967261763A6FBA5C08DAFA57D8B081C85C622E385744119CB9F34E6E7D6B5344B0BD3064C76223F06AF994C1D260B26E5B3CA332B31DF78BA879755A309468E682A70DEF75571004A220E4EB1263DB1A8DAA13B08CCEB8ED8D4CF78168503655717E889E4244DFF711AF582DB70F131E79B37F1C8B4DC3FDD9001269FCD13B5F6AEBC93BC3D8631A755AEBC57848800BFA4E3478F48D4ADB2E880CC5D13059DB74FC0D224136D8CA0DCC001000C3AD53ADD62E2E8B749619D311DEFA33EA7FE3682F53DE6434164B0D1316B22FA67D6C316413AD8F582FAB3ECB88AA0AFE97D155FC7F95D60973F8643D9C57BEF260ADBEC002C9527178C23171139F2059A63068D5891DB262A535E195140941FBBA1902127B0FCD319FCE33331CD687758E3E4B7A07278AE50520E47B68B2A98B7A4FBDA1AFC7CA9629939F46B4F637836D6E526F232BD736597170464C57680179D57DD32118356B38C8C986012FF4A56FE43311D690D24E35A3A6CC71E9C01B3E725FF6D101F67DF172C68ABF5E5E7B31B70427DF9CA278FB4FC259EBF6246B69A11A46F0A502E93C6402A2A4EEC9D1C1771B275F8A2356535EC831C13462459034B865BEA8FA83A9F49CD458476E6C2300D907B068F289710205656B88ACCE6F5F8634212FC7A7FAD33DA7463FFFA69E83511ADD5847BFF93895630D334FF4E2A77F3E8B2B6ED3A63151583C8028B7A1D4DC34C55EB3A4ED4959FCCC142EACC18394CC5685519615A35A750EA853FDE1E048BB8A5F731E5444F698DA48EDC76DCE2A6D8D6CE5A2AB93FDDF93B9E6B45B65CE9AC0C97A8F5A21862B541FB005CFFA89EFE0597FD7C5B503F8DE08A555F0A2DF250AD68C72C3F48124477476D0A2DF32359267E2037590EA414A041BEA854B7D7E27A16E2DDBD9D9AB64CD84457E448E3D788028824F5B1AEDF164C7EAD98CDFE0924301DA142F0D125FA172A7732B5FF1F9EDC1F1FEFB748132310EFD773AE404392805143DFB79BDBA26E074A2F7D9348F4DAB0E83A38884F18FF6E091A211EA42A0B04E82DC0721700463634610DEB897E044F5344EFD119A0789C378136BBF165F86D578859DFF110CEE18C5564694C8E9BAF56D7ED60A8E3E153A073C85B65734B1CA75B15D35D2AC054C2569DA9A162733A83579AA940104BE68F49629629D982489FF7E315A012F9084A57E33B3C6516BF4B4A91E70BC1AD3E81AF78A79EBF264B73C40A65634FD59859F6AF3E71234A3BCD6DD0346C106F0AAA1C6ECD317F5EED963C82FEB71AC7FBDB37ED5E862E7C9AB78140C8B3C07A9B007B3CB0CD2EB1909DE4AE0A29B76082F67C4CC20B81FDF47573334F4FC07483473D0C622ECA51E56573154ED04E47278788CACAF0BEB412F8AE3E5CDDA3DB86DAC004774B04169FB7B8F3477B7D752AEE14223762EDAE13B6B2E15F37E3D8F162BC0310B018B39C3231540078C40F5CE1F7F784AED553AC4BF9EBEE7D0214385B4AE4395F30956C02E1C1E5CDC92CF1A9CC0160D7B076DDCAFECA5432E35F7CE69E2CC53D472F6153813882FDF2BC2FCB2B06712F1EA674004168437584E9713A3CCB103A96DF2EDA308EA84BB3B1C5433F385952B1323E4AFE8CC66DD2C4E9C6B1249E9D4F07BA88A847866470FEC9605251147F9B601B5FE23B19E849EC7B68A5AFCED2BF867442479F1634E8390CA546F82217DAEAEEFB91176A093E58FC02B47C843E007A39CB81EF433BCDAB92606041ED42A14CDC00C5876682F811ECC38FA8736FE7E16B179B2A99242FC4AC1D2C096FC933C2A4A547C9653EAA050818FADC16BC24C8565C39159BA9F68E51530884353BF8B0A7B8905727E9251D3254D1E0E96F3E4B33B4D485DE01C49444F908774BD675D50ACF8A842625CFAF05D0FF060530CD0EFD15B12FFD147050A604C5820DAC38AE0C38571A3595DBE6BD8E5D1645481C5B13C5CA606B8F6E7D0E55067ED36EFCE9053964380B5F7CE7232B6A53A74F0D908DF85016A99D7AA10E2B616EBACB2F8534FAADDAFA7CF657D73972A18D8BEC1268362A40F107CF24FB59DFEC8E16392B91C5ED73DD4BE23F55D99180AB31C4526E4F83C156C1D8A4D985B64739D58C9BD9BE00E3B00C3B29E6087B8647A429C69FCE39E1E94776F6092B58F1DDF6433C140CC4E0AC75548E603AD8EF18DFAA1E6A3D23DAE275E47DF802A108858B48E4E9CD189AE8A8DF705785F353CD265FD692DD92A27C93EB00E07C4944D8F617089E8D5D92FDDA41E29FF09E8EC311A46B072A881185CA0D5F0E50F31494EF5734484C46559C7E35F802C836AF81C02FEBBB5DCC6677300445DE3FAA1DBFDD59FEF1443ADE9DFC7191DAD8F6F2B49F2E7DEBF1BFCD2091D37A14833DCB84A6300CE73D9B95250AD7FAC09B84A9566CDD023F9E28BC36A152AF97B2D82063ACA914A3FA8E2F8F692616FEF5ACD88A56F7710AF87AF2834305D960BB50A51B46BAF9B932E0838B6E8A60AD22B4658A67FDF0D05F87E2822915318FA983328F2E0DD1A0F9D3645C65B61275E58F658BB1F31A857BF4CB9E5D8FE9F8A78FBF60DC05E1641F5AFA19C14031A39225552C8B00758F3EEBE1D3001EC62A02B9F26424E29F96BC388E524E0AF95F4A8DE15D1203688E1CB0606B9FBE75EAB4C218B55FDE5626334C34C166CC62D59AEBC5E7DE48C336C40D5997D367A95592C714B064C4010BBBB0C6AED81F3F024A6E9BF814FB4E8F1D880796690AB8161EC5C168EB1CBEFA46305C1E7023075313C2E47A22EB9FE91AF96036849A192A8DD6E1205A153155896BFF5DF67052D7E0630F749A496F3ADCDBD27B96989386B1DDF04B5E937D4BFE176BEA7C32FC8442BA2ACCB0E611E0C5ADE5751AF9BF9C12420C5DC852AF931F42825E2EE45ADF1B9DF1B2A2F5CDA4B3D30FEC4774339E1EF065E0E4CC913563C2736E3D581FD4AC07DF9EA115CA4C1E50D69D2339183D625090939A34DC3A69B7B4E2A927D40F6E0D270C8411EC76E0F6EB46B9E59C86A7B0470722114B93A0E21E217CA039CCAF44F652E31CA94B163EB7D3DEA539148ADA1910B00B42FBFC474A66642531A11DFD89C2E1B2B8EAD8C4857B45CF43A229F8F4352B9C38B45282DB8D6BACA4C7262E53C151DB545E2F34FED68DB658EC1DD3BCD4906EE9E9316D590C06BC5849CC05B1E04F99E387036CB867BD6C1786DA350B8C9614D989FF7B7E60EE08304E335CFFD05FC8D94312902449F85E867D6CBE39DE99F9FAE5D659769F2816D79A01F2B03B27833D1AD45BDC4B401C8D2E9FB26EECC17EEE84659F562F90752D6CA50A36BB8B0B4E408B4088D11FE6B29C6587D1DC4C32D968B11990FE064EF05A1ECB233B8D3D924CEC8801D829BDA32FB779D81C0F80788F26F3EA3979317A5BF7BD3441B068FFA3636725F88F677FB941709719BC56EF1A1F27D9A6D71A2B574B9FEC14339B0BF8D44860D5BE406815824951667A68792866EDC20E058A331FCE7FC8F428980C170E0E16A89F836CF9147C44A06AEAAA3687ABFA758D9E99A74B88452350BF40D8E46DD0E078BA5EA9E804FFEB331A7CDE3ABD1032CC02D4E1F9CCE2B4279F90E9CCF10B0BC224E0C67FD8DC49F3F12364D79B85DB3CEC17B2EBFAEADDB53B75B08D44CDE8E5AD61F8072A35DB3F39E1E08710E35BE8DCA508BCA5064A55981C942B8DBA7E6927E01F9A91CEDF31EFA2032E7EED7317AEFE8E1E4611BD5C1F048A2964B61ED8BC9013C7A5BA81462DF3F4FE11CD2029A7027DFBEE020DB6EAF1629A105C2C90ED94054B71BF1270CD4CCBD3E92BE74708E36212E2D226EDA8027C92C1EE7FE9DD291798F0E92473AAAD1E37A98526FAD0BCDF0D43BB51D6711EEFF21D33AF52B3234F4493FA72FACD05B7D2C8B86104DC2B108C7A34136037D7CE3F8362B707887618B803E1A4742CC8FD3E38C54D12F8D3CB2406235833DE9BBBF86F527B96A18E68FB7FD8BFD28C12911EDAAFE7A7D90B8F8AC9FBBA72E8DA449B9FD184D29F6041301CCE69DC9E1F7BC51E22C42FF4D7C163F07346A7D12DE22779AD211C7CAA1CEEA5F3E42E5A4F7AA160455689E0A170D91BD782663C3825C4EC80DBE91AA6A0E1126AEA9D07037497AF2A187BD6A9ADB79350C0D3B36F3666176AB3FC4F4F7AFFA531837BA78E80C6C7C7857B86DD59CAAFFA5B88AA572211AE32506311E574F5F20734F347B5403710A403B12D750F2429311CFABC9898C12B12221C3EC0BEF81F6D3200174018AD6AD3D32F4AE37A99A4DD2E73BA6064EB8EE86334C49F846E34D45036D685BFF99F80B2E924F964B40DC6A72AC9252892CE12BAF5A7BA03F1D55E44438BC124950425CFB1273EE3B4EC2EF861A2D1CDD304B43DAA44B16CBB8B914A17C61A44B7194F5F86DCB6223040565EEE74747F63343FFB5CEE1DCF343C3F6956390E9817FC38992D7F40745FCD6AE47BDBCDD04C2BFF476D595D172724D46A0479BE325BB6183C6B1BB4787D76A29870A6A3ECFF6D1657F14183B44EB1E7C1CAA38B0A3317DA5D85976223371FB0D311C9DA357B7A36ED0FBAD508CCD2882C7B2F8241EA13BA9FF0D98585F739392605A158A4DE4E0766248BB2588E69D806083669441309431E092BE567B6E6B1DBA8586DDF43412BCED744D9821423973035F02B12C3FFBD8E70F2DC3D0C31D7DB804334096E486164B63D9B3493BAB9F07CB1DDE3EA26A8E5060B8B04CB21496BC8CEA46F317BE1BF1161585E1367237C0D0BFB9A8E07066EAD5E7AB95B6398CC6F5172A176F08065722234A374AE653706B53F68F4F414E52FFF5385F825181B2DD37C97D1E0C15A47CA8EBD007EC209FC73E8EBD3AC42EE2255EF6206C9E6777A17079533BE9E921473482E14D0C8C1D8DD384E59B464F252927AA5AB429622511B96D449A9D0725BC8DC1D1CD7C800698230F002B6AEC9B0EE3D62914696C7FA4906707586F3A2EC66E27A43BE84EF4880A964A3601C95B87221F0EC8606BE1A90CE2BA516AF557FCE25F564578B45EE127273DD35EA125E69B7FE249A2CD8199DDF11D7D427AF36F299B95CC2FF26CB086F775009EAFE096016C6CB3E6358AA13E999B7181271C225575F28D81F58EC71363E9F890BC0B866F57C54C4A87631809DBBB37B3F907980CE1AFF88C83BA30C44D2E195A4F65F4AE9200A5D446481BEDFF99FED1C22C42AFC64E90102989BB3ABD5E54BF756B759AE342DDF88D2F151711583D2645FDD6EF9EEDA0D3A4865F7CA87DDE3D11F50E75A744A0FA10886070F22C572C7712960B78017F753932B4D4DDAD28621D070317875DE2ADDEED038BF4B49E63EA406DDE0F245E68C116560B369845077C5F9332AB3D852EE2B09FC96E0B6E0E58CFCDA1F601F2ECA38A1FC6A0454177A9464120276AAEAFD86C31561C4AF31F35C19E7CFC728130D72337A3065FAEE4967C8DAFE582661EC1A2E232EF6C64E1F2644AD4E323F934A164207AC88F2EFA5B9E4669096D0D0B49A3F2F1EB261122D30B4D5ED446E1DED88546BA47B4CF4F7D5EFDD907F856DC825185E22372FCC9E507BA94391B61A9802A033554FE8FCFE7A8C79892C229C16AC430887CAE6323B2873EDB9D667FA9EB1545217229B15A92C61FA045AD93CCA5E906E4D88A3890F48976671ADE60FA4189F39486A84EBF7870B789EDC7E8E3A99A0E46A66FC9CEC7AEAB93385D2C8477500E885F48B8F0CCB1B7628213B6C5353AE457315B1007702BB3823B6B95C1A15BCFC1C2B0F65B253D516BE22E9C97CA33D185B48F9C34DA1E6F5CF68C3A7ECE68DD8D4156E78D687ECBB8482A64DDB609F748C47036F07A46A6397D5B4E6515DA5DAB7011FA7F2A89FEC556E880C870A98AD504272A0EAD82A865A99B528AFA88136A11AFC6F9F9E71FEC0EF424874202C2C1779FD67E4D9DB859EF095CAA405448F29CE46F72022E951459E7032EE4FADF5B6E0362C2972A82C8DB662F2661AAB9C5A82038C652391F5E9E63F294DDB344026D0F4AB76D16EFBF1002E2D6E9F13EFA5AACE35CC759D1E75576A1551C11F3EB691B2DA243C3BA91F211852CBAAE2AECC7DB9E18D3E427AFBB9CE99AC714BD0DB766DF394CC9D3DB87FD7CB91B37AD51C6ED1702782359D85EC1FD92901919AD4CDA8F73B3FF5F67B6B46A2B206AE2B2B34060E04CA91FAE03FD88D3336B38F4427E24C2C4CC352899F29C8E87659AC417BCC37D80AD28542EBEC5B0FB90CC5EBFB77CA7CD2BB98FDEB866C7487C9CC415A680D9EFFC64D61BDF756FAC21E51E91294BB26325626BD21A1C9E9AB1A050D1D2A2FAE2760FBFA9FB7BCCE9F5C6EFC0F3F4BA8A545D30B18FAFC4D72F0EFAA0D283E578861C6E5078CA35A5FD8F9586183A436062ECCFF2E38C6172D4960AF524A51B0FD8D970399456722905BB100F677663E87183D8A2C2041D849FD9D280C6790338E9880FC3895BC1917750E2DBA44070682EA806B35B6875414571FC0951ADD549DE1F75071068A2352AFE06CFEF38A2D3715AECCF8605F3DDD2A427A906853982BBFFDF216375877C0043F86977DB6DE20A91F21D6A222DD9FE486131930E923528C4B5A540D6CC432438CE49EBAD2D46BA3B5CBC8A6DB7E7196A421FF36A3A26BBB7AD30DC5CD8268734762DDCF2BADD8BA2E6E825BD0746F0C5483ACF6A059F0C97DFE79F0C6F64C59570D4E6F23BE7D057C86415D50ADCBBD1EECDB357904D44B8BF5CA77654D795853B6C8D820F30C046605EFAA2D3DB4CDAD6FEDE5D31808335C31D3E970CC1E767CC1409B6AC1E2A94D67FF9ED268331D8156CF17588E070D0EB84A342890588C52DB7EB7DCF3A51DAC31EE5F980F5FBB3356B888DD1212FA727B84BF3C8FF082268DD6111B9E44141FEDFA633A2ECC247CA358ADFA660F93FC7361962901B6D42EF66AA10B3C22413A7C5A8E369F95F0ED8266D12AB22FE1DE62CC65798D56145ECB624C0373938BE26A9B7DA2AFBD0E72C1D9F02213884AA06B8D30D580A04C5A731FC2F12BDFED0FE3E83AC2816AE5229BAAA94DCC30824771673776ACA1B08DEE7F340056BB2FB01E4505C3335AE1C495F2979B96739A067514C90786356F99B964167E7790084F67A229801B04D44E0F13182FBA9456D2CF77167892DAAADD5E314E9FA507D36DFBB8CFA2C6FA6D28BE5FC14F1C58DFF81C74F1CB114FB34F26E42C084BFDBE3B7A2C23A4DB631F1EA222F59A1F1BF355D5B4D0E7266B240045F14797CDF61C14D33FB914F9E881EB6AABF8103B92BA6FA374500C0515DC674C91D0336DA314C8F374C6C52749B0F387F90A3D589A348840D45920F367A33C344E81A78C7C87E3DAADB04364AD1F92A6D9885BAEC85578A17FE4633FED4CC81EECCB2A92B778D5E38F4B70D7331BB481F0750B0F5B4AC203804F694EA7DD8915BD3E33627CD422BD00E2ADA6A8C15320ED37F51BF237873060AC3DC2D1A035B7F4835081A061D9E806EB86B7FB87B000FD08CE62F4AF648D2156A7E8B2F38D4524ADD0096DC4B064C024110BEACA521D8137C63F36806DBF1A318F3BCC73DA9EB2EAD4596D20177B6202F765165EA6A6C5EBCED6C5568543298BE304EE555A52A9B149DADFFEE523568339288ECC708CB20DF2498EED1C34B423013A4CB39A2937290BEF8CBB87507C1E37FE04AC6EF324A3D43E12EE3E7EBE74369C0D2E9F0AA3C7196B541D5D01231F0311408468481129FEF65AFD36AB03822D842998C168D08EF242A468C79EA871AA6D08D2FF8E1694EA1D4F1D2478771CA3B00FAAD0BBA0AFA2758DEFA1E1FD985A50ACCE060242C01CAC632F6AA5F55A6C5E200BE9868290AD00A9544262481363A4253FED7C8D88CB5D222A2D3B5D3B93ADDCB3E67634633B95884BFC17DCAE007CC87BF487FBF625F17BDAA47EFE2144D3EB1D8442AA2D163835060219D48D74707A3FE02203544508E827A9C10EF3697C9417F1CD89DDDBA8BD7E88DE6AC938A891A947E72461D7E501D2C76CF2A43C003B533F0B60A1AB21DB80CB32FCB6B99D6DCF0ADD0CFFD833EF1A1DD3CE02072775559A5999EBCEC14D8C7CBAE692581563B7541B9C78C72C08F113C31C8C8FCC89C3ED0012E1191E594B5219DD3C2AF8B0DED718F4DA421EC1093C8A042BED24F3E9EF41FACE08254C960DB2E83817CA3D9D08433F4E7752E6CCCD38C5214D54888EBAE4653C62D8648C5BC62E18D63B6423743BC6F80BE988792BAAE021926607B6A578E77EC05A5BAB89FB95ABE781739FB0082CED8991AB7732DBEA89E10E984A5E994C68AD855FCCDC58B8F699F55F083D07AF133B31A918DA7975CB298225523E2D2A6A83AB3B124B552F330F476CB1C189A9C6D6EF91AD6D2FB4D77CD850B14ED5F1FDC18060D54409FCBABB11FBE0D4BAD92BE093F77420FE99D4C0AE4D8B48A2D487BD94EE06D169C13AA3F7CFA82CCD250E3ED6BC8104D30C1FA8E77F976A8C61553D8E2660301C86829E50233E567D2BF0909ED4A9DCC2753B84421E39E8E75FB08E317E7E034DEFA57F6EA7F220B4C02B2B00C69BA78CC21D78D0033AF72C33883C40C249A85BEB8C4D53FDB2D8907AB2F5809C3843F7470D42A0C9EC0EF0DC3BFACCDAC376BDBB0D848068215C6F33F4B08EA76A2B027BF05E6503D5C15D8BD72CCD7C708FD00165EAC99223D72FC71D8AB2B0BDD25E7F4B99D0CB9ADCB949AA1BD9EE8332E96333BB3D0BF724159D16E4C00D8CFB1F5800BC0C30C3D3966AEB42C0BFC56E59B568724FFFE29152397852FC538358DD1EFABC045F549A99DF9C5E74CC39B0E48CFF5F159CAB28C47424AFF0C4CD4ED95F9BC5A6ECDDB1CDCF7830A322C1B9D3B5618F5A82FACD2D44924BF6789B647776122A26396D18F8DE5843EBE03BEB83EE82AABDF93C6A87D7238A9FF21749D3CBDEE5CAF767BA3B35D1375A23F04C3169CD72E1CAC1A5C963FE88FFAA20E0DCAAB625D85E06607E9F3FFBDF1A29C3106767163384B30B99A3CBDB9D51D9559D314531E17573082D97FDFB74D26D8881E3B0D3A5B8DBC5B7238226F926A66FC16F5A17D0A887B5BEE04B88392D141FF60144B24736822509BB760BE1A9206383929E82469C36F95C743FA2D419AA6862298FD67C64DB3788E4D399BA63772186501E5720FA204CF3B5A1EAC46D4281202F911DA1307EAE02135A71509A0B5EFBC38237B2199287099767FE03FA9E7EA95628131D55D5B711D0DBFDE942054AD52686A15D07E1DF3A1271A55DC6E40AD981C62B9F387DD976FD5EECA712A13075B103FEAE581312682FDFE0E54E7D0AA3C8F8E598E459D41920C4B756B02FECABDA8CA765EEF43882364DF981CF7447FB143A8498471365BA0DB2E64B1B13341CB857D0D10D53BF178919B2E25E25CAC8AE5B6CEB2B2A3C2AD01371EDB2F26716468F30CD38B818997DE8C732407AECB6D1D45C826C0E859B71FAA068C8406F643CD4CF4E42F748AE7F60582C6B6DF4F40B8044F3F939E7EB5B5B5131858B9BECBD9B534EE377F132570F2622943D6952405BECFF4E14A9ABCBF0F9887FE2CA1C359295C7D296F124BBC692934BCD6C6CE73F1D0AACD56EC2012ADDD461DD4E186C174DEC8E1A19F25823E572C09085F88308160590F8912F1857FEA2C4DA48C21F91B2C8A700DD82211571A4FBBC88428F2CBD3E7E667D3728FA6F92EED1B39FA9DBCBE4F246A8108BAF53C0CEF51B2FD6DB5CF224F6C74A2B64D83DCFD4AE3ED11B73215808E086D5E2C27B4246BBCA5716727747F7DE0F3E7EB6728E3EF8E00356494656F85FFF9FCD6409F7C1137E8959F82CE5BB1D3322C1CFD0A6F078606CD74F9F4A9AA5ABD0BE381C2310F400D3ADFA1E782EC4CB354B314A061E095A35E411F6AA832F40DA2689BE11858A1C74111018930FE4EAA41B773DCB96D73EB6C76DCA35856C9BA1A3EA677495BCE2FA3DF415F9D1A60D8FA6E44408A5A0FAF264D8A15C97DD30732CE8C792C0DE37C70E87AE30C27962407FBD4352C504F5D21C9DBF91A168AAE6B2BE7557A33DC0EC66534629B3274391A30329AE857B04C535AB6A5A01151D3462E02A9EFCC0A12C4AE11728DC6754FD7FDE59632B9187C7844AA901ADE45D3338A81BA0AC1E2B4F809147C3CD3405409DC37BDC687AF4AC1E5B7D1DCC9B6F47A3CF6E4CA4DDAE04BBCAA18582A8C6FC98D92FBAC398888C193830787593A70F953D6091A555D3814A473EEC8C95E0374A80BADD91B942791237D395B464A5908BD4959F5236F97FC628C5BC40E3D90D3F0EF9CFA5584385696A65904ECFFC960F50D8BCE54FD2985FCCA2F5F7EB244F1FB697662E3E67F964B67CEA51B400184E7054A0774046B6D4D9B373C52621BAA57E43F74735E7C7772467318C6F65679837E467A23215B8F2E3BF8B4BB1C7CC7379F411F500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/EHUKCF+SFProText-Bold cguidfix
/F1.1/EHUKCF+SFProText-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
213.33333 264.89822 m
202.80069 275.56451 l
198.7999 271.83221 194.75594 268.87515 190.66521 266.69693 c
186.57806 264.52051 181.68861 263.43228 176.00044 263.43228 c
171.55533 263.43228 167.44481 264.29745 163.66708 266.0314 c
159.88937 267.76535 156.62254 270.14142 153.86659 273.16504 c
151.11066 276.18686 148.97894 279.71948 147.46606 283.76297 c
145.95497 287.80646 145.20123 292.1413 145.20123 296.76038 c
145.20123 301.38303 145.95497 305.69449 147.46606 309.69479 c
148.97894 313.69333 151.11066 317.181 153.86659 320.15964 c
156.62254 323.13647 159.88937 325.49097 163.66708 327.22491 c
167.44481 328.95706 171.55533 329.82404 176.00044 329.82404 c
181.33243 329.82404 186.08876 328.75742 190.26584 326.62415 c
194.44473 324.49271 198.40054 321.69214 202.13148 318.22604 c
212.66594 330.35645 l
210.44427 332.48972 208.08949 334.44489 205.59979 336.22382 c
203.11189 338.00092 200.40094 339.53522 197.4669 340.82309 c
194.53287 342.11276 191.31102 343.11102 187.79953 343.8215 c
184.28806 344.53381 180.3988 344.88995 176.13358 344.88995 c
169.02246 344.88995 162.53377 343.62186 156.66751 341.08929 c
150.79945 338.55673 145.7337 335.09064 141.46667 330.69101 c
137.19965 326.29141 133.88965 321.1597 131.53307 315.29236 c
129.17648 309.42679 128 303.16013 128 296.49417 c
128 289.74005 129.19987 283.43021 131.59962 277.56287 c
133.99937 271.6991 137.31119 266.6106 141.53323 262.2991 c
145.75529 257.98941 150.75447 254.58987 156.53259 252.10048 c
162.3107 249.61108 168.62309 248.36818 175.46617 248.36818 c
179.82315 248.36818 183.80055 248.74591 187.40018 249.50136 c
190.9998 250.25682 194.3116 251.36661 197.33379 252.83255 c
200.35596 254.30029 203.17845 256.03424 205.80127 258.03259 c
208.4223 260.03275 210.93358 262.32248 213.33333 264.89822 c
W*
128 201 768 192 rc
123 349.88995 m
218.33333 349.88995 l
218.33333 243.36818 l
123 243.36818 l
h
f
Q
q
424.90189 318.46442 m
424.90189 321.56903 426.2276 324.20706 428.88089 326.37851 c
431.53238 328.55353 435.24661 329.63925 440.01999 329.63925 c
444.26379 329.63925 448.46289 328.81735 452.61725 327.17709 c
456.77338 325.53687 460.97247 323.16443 465.21448 320.06158 c
473.96689 332.43161 l
469.19528 336.24512 464.08911 339.14874 458.65198 341.14252 c
453.21301 343.13809 447.09241 344.13586 440.28479 344.13586 c
435.68851 344.13586 431.4447 343.49341 427.57663 342.2067 c
423.68704 340.92178 420.3736 339.08234 417.60941 336.68835 c
414.84698 334.2926 412.68036 331.43384 411.08981 328.10849 c
409.52075 324.78314 408.72458 321.0809 408.72458 317.00183 c
408.72458 312.65717 409.40982 308.97647 410.7803 305.96158 c
412.15076 302.94669 414.16174 300.37506 416.77029 298.2467 c
419.37704 296.11832 422.6261 294.34528 426.47095 292.92578 c
430.33902 291.50626 434.73849 290.22314 439.71048 289.06921 c
444.04373 288.00504 447.55579 286.98572 450.27527 286.01126 c
452.9715 285.035 455.09338 283.99237 456.66245 282.8851 c
458.20825 281.77606 459.271 280.55753 459.84531 279.22775 c
460.41962 277.89618 460.70587 276.39053 460.70587 274.70541 c
460.70587 271.06781 459.22629 268.1857 456.26526 266.05914 c
453.30246 263.92899 449.30197 262.86658 444.26379 262.86658 c
438.42947 262.86658 433.21237 263.90924 428.61609 265.99274 c
424.01804 268.07623 419.46649 271.06781 414.95612 274.97101 c
405.14453 263.26498 l
410.71408 258.21146 416.77029 254.46437 423.31134 252.02553 c
429.85419 249.5867 436.70474 248.36818 443.86484 248.36818 c
448.72766 248.36818 453.19333 248.98911 457.26001 250.22916 c
461.30344 251.47281 464.79584 253.29071 467.66916 255.68468 c
470.56396 258.07864 472.81827 261.00381 474.45352 264.46198 c
476.06732 267.9201 476.88495 271.86639 476.88495 276.30078 c
476.88495 280.20221 476.24445 283.59396 474.96164 286.47604 c
473.67883 289.35815 471.77878 291.88312 469.30441 294.05814 c
466.82828 296.22958 463.69016 298.07083 459.93298 299.57828 c
456.17761 301.08392 451.84433 302.45859 446.98148 303.70041 c
442.53909 304.76462 438.89285 305.78574 435.99805 306.76019 c
433.12469 307.73462 430.87039 308.79883 429.21188 309.95273 c
427.57663 311.10486 426.45126 312.34671 425.83041 313.67648 c
425.21317 315.00806 424.90189 316.60345 424.90189 318.46442 c
W*
128 201 768 192 rc
400.14453 349.13586 m
481.88495 349.13586 l
481.88495 243.36818 l
400.14453 243.36818 l
h
f
Q
q
606.42883 317.14676 m
606.42883 250.63042 l
622.63129 250.63042 l
622.63129 343.38177 l
605.23187 343.38177 l
576.94305 299.52322 l
548.65424 343.38177 l
531.25665 343.38177 l
531.25665 250.63042 l
547.45905 250.63042 l
547.45905 316.88217 l
576.54346 273.42047 l
577.07568 273.42047 l
606.42883 317.14676 l
W*
128 201 768 192 rc
526.25665 348.38177 m
627.63129 348.38177 l
627.63129 245.63042 l
526.25665 245.63042 l
h
f
Q
q
758.7619 296.49417 m
758.7619 291.96143 757.98627 287.67334 756.43311 283.62808 c
754.88171 279.58459 752.73065 276.07535 749.97809 273.09848 c
747.22906 270.12164 743.92346 267.76535 740.06482 266.0314 c
736.20441 264.29745 731.96869 263.43228 727.3559 263.43228 c
722.74133 263.43228 718.4823 264.32083 714.57874 266.09796 c
710.67523 267.87686 707.32471 270.27634 704.53082 273.29636 c
701.73694 276.31995 699.56256 279.8526 698.0094 283.89609 c
696.45801 287.93954 695.68054 292.22943 695.68054 296.76038 c
695.68054 301.29489 696.45801 305.58298 698.0094 309.62646 c
699.56256 313.67172 701.71362 317.181 704.46442 320.15964 c
707.21521 323.13647 710.52081 325.49097 714.37946 327.22491 c
718.2381 328.95706 722.47559 329.82404 727.08838 329.82404 c
731.70294 329.82404 735.96198 328.93549 739.86554 327.15659 c
743.76727 325.37946 747.11774 322.97998 749.91162 319.95819 c
752.70734 316.93817 754.88171 313.40372 756.43311 309.36026 c
757.98627 305.31677 758.7619 301.02689 758.7619 296.49417 c
h
775.9292 296.76038 m
775.9292 303.3382 774.73157 309.55991 772.3363 315.42725 c
769.94281 321.29102 766.61389 326.40292 762.35663 330.75757 c
758.0976 335.11401 752.9964 338.55673 747.04956 341.08929 c
741.10626 343.62186 734.54169 344.88995 727.3559 344.88995 c
720.16833 344.88995 713.60376 343.60028 707.65869 341.02274 c
701.71362 338.44519 696.56757 334.95752 692.22052 330.55792 c
687.8717 326.15829 684.50323 321.02481 682.1062 315.15924 c
679.71094 309.2937 678.51324 303.07199 678.51324 296.49417 c
678.51324 289.91812 679.71094 283.69821 682.1062 277.83087 c
684.50323 271.9635 687.82861 266.85339 692.08765 262.49875 c
696.34491 258.1441 701.44788 254.6996 707.39294 252.16704 c
713.33624 249.63446 719.90076 248.36818 727.08838 248.36818 c
734.27417 248.36818 740.84052 249.65785 746.78381 252.23358 c
752.73065 254.81113 757.87494 258.2988 762.22375 262.70023 c
766.5708 267.09802 769.94281 272.23151 772.3363 278.09708 c
774.73157 283.96262 775.9292 290.18433 775.9292 296.76038 c
h
W*
128 201 768 192 rc
673.51324 349.88995 m
780.9292 349.88995 l
780.9292 243.36818 l
673.51324 243.36818 l
h
f
Q
q
844.01691 318.46442 m
844.01691 321.56903 845.34265 324.20706 847.99414 326.37851 c
850.6474 328.55353 854.35986 329.63925 859.13501 329.63925 c
863.37708 329.63925 867.57794 328.81735 871.7323 327.17709 c
875.88666 325.53687 880.08752 323.16443 884.3313 320.06158 c
893.08191 332.43161 l
888.30853 336.24512 883.20239 339.14874 877.7652 341.14252 c
872.32983 343.13809 866.20746 344.13586 859.39984 344.13586 c
854.80359 344.13586 850.55975 343.49341 846.69165 342.2067 c
842.80212 340.92178 839.48865 339.08234 836.72443 336.68835 c
833.96204 334.2926 831.79718 331.43384 830.20306 328.10849 c
828.6358 324.78314 827.8396 321.0809 827.8396 317.00183 c
827.8396 312.65717 828.52484 308.97647 829.89532 305.96158 c
831.26581 302.94669 833.27679 300.37506 835.88354 298.2467 c
838.49207 296.11832 841.74115 294.34528 845.58777 292.92578 c
849.4541 291.50626 853.85352 290.22314 858.8255 289.06921 c
863.15698 288.00504 866.67084 286.98572 869.39032 286.01126 c
872.08472 285.035 874.20844 283.99237 875.77753 282.8851 c
877.3233 281.77606 878.38605 280.55753 878.96033 279.22775 c
879.53467 277.89618 879.82269 276.39053 879.82269 274.70541 c
879.82269 271.06781 878.33954 268.1857 875.38031 266.05914 c
872.41754 263.92899 868.41705 262.86658 863.37708 262.86658 c
857.54272 262.86658 852.32562 263.90924 847.73114 265.99274 c
843.13489 268.07623 838.58154 271.06781 834.07117 274.97101 c
824.25958 263.26498 l
829.82733 258.21146 835.88354 254.46437 842.42639 252.02553 c
848.96741 249.5867 855.81799 248.36818 862.97986 248.36818 c
867.84271 248.36818 872.30658 248.98911 876.37506 250.22916 c
880.41852 251.47281 883.91089 253.29071 886.78418 255.68468 c
889.67902 258.07864 891.93329 261.00381 893.5686 264.46198 c
895.1806 267.9201 896 271.86639 896 276.30078 c
896 280.20221 895.35773 283.59396 894.07666 286.47604 c
892.79388 289.35815 890.89386 291.88312 888.41766 294.05814 c
885.9433 296.22958 882.80518 298.07083 879.04803 299.57828 c
875.29083 301.08392 870.95758 302.45859 866.09656 303.70041 c
861.65411 304.76462 858.00787 305.78574 855.1131 306.76019 c
852.23975 307.73462 849.98547 308.79883 848.3269 309.95273 c
846.69165 311.10486 845.56451 312.34671 844.9455 313.67648 c
844.32825 315.00806 844.01691 316.60345 844.01691 318.46442 c
W*
128 201 768 192 rc
819.25958 349.13586 m
901 349.13586 l
901 243.36818 l
819.25958 243.36818 l
h
f
Q
q
324.48013 324.8139 m
280.08459 280.48044 l
279.51215 281.58963 278.99533 282.74539 278.53235 283.94418 c
276.98193 287.97238 276.2067 292.24606 276.2067 296.75986 c
276.2067 301.27725 276.98193 305.54916 278.53235 309.57736 c
280.08459 313.60733 282.23438 317.10336 284.98352 320.07074 c
287.73267 323.03635 291.03632 325.38193 294.89267 327.10934 c
298.75082 328.83493 302.98401 329.69864 307.59402 329.69864 c
312.20584 329.69864 316.46237 328.81345 320.36179 327.04126 c
321.81174 326.38361 323.18451 325.64175 324.48013 324.8139 c
h
320.56277 266.147 m
316.70462 264.41959 312.47144 263.55768 307.86142 263.55768 c
303.24957 263.55768 298.99307 264.4429 295.09186 266.21329 c
293.64371 266.87271 292.27094 267.61456 290.97711 268.44421 c
335.37085 312.77411 l
335.9433 311.66672 336.46008 310.51273 336.92307 309.31216 c
338.47351 305.28397 339.24872 301.01025 339.24872 296.49466 c
339.24872 291.97906 338.47351 287.70718 336.92307 283.67719 c
335.37085 279.64899 333.22104 276.15298 330.47189 273.18738 c
327.72275 270.22177 324.4209 267.87439 320.56277 266.147 c
h
327.27951 252.40131 m
333.22104 254.9691 338.36404 258.4436 342.7085 262.8284 c
347.05295 267.20959 350.42117 272.32367 352.81503 278.16708 c
355.21066 284.01047 356.40759 290.20868 356.40759 296.75986 c
356.40759 303.31287 355.21066 309.51105 352.81503 315.35623 c
351.3956 318.82178 349.64777 322.02213 347.57333 324.95905 c
376.44836 353.79257 l
364.97446 365.25 l
336.01147 336.32867 l
333.41125 338.09909 330.58853 339.62936 327.5451 340.92133 c
321.60358 343.44434 315.04294 344.70761 307.86142 344.70761 c
300.6781 344.70761 294.11746 343.42282 288.1759 340.85504 c
282.23438 338.28723 277.0914 334.81274 272.74695 330.42975 c
268.4025 326.04675 265.03247 320.93265 262.63861 315.08926 c
260.24478 309.24585 259.04785 303.04767 259.04785 296.49466 c
259.04785 289.94348 260.24478 283.74707 262.63861 277.90189 c
264.05984 274.43454 265.80768 271.23422 267.88211 268.29547 c
239.00885 239.46555 l
250.48277 228.00812 l
279.44397 256.92764 l
282.04416 255.15726 284.86688 253.62697 287.91034 252.33501 c
293.85187 249.812 300.41251 248.55051 307.59402 248.55051 c
314.77734 248.55051 321.33798 249.8353 327.27951 252.40131 c
h
W*
128 201 768 192 rc
234.00885 370.25 m
381.44836 370.25 l
381.44836 223.00812 l
234.00885 223.00812 l
h
f
Q
0.40000001 0.40000001 0.40000001 sc
q
128 128 768 265 rc
1 0 0 -1 128 201 cm
/F1.1[ 52 0 0 -52 0 0]sf
0.10390651 50 m
(!"#$%"$#&'\(&\)*'+,+-.!")[ 17.204687 40.589453 34.978125 32.997656 36.755469 40.589453 32.997656 34.978125 14.056250 41.528906 31.728125 14.056250 36.704687 30.560156 41.528906 39.192969 35.130469 39.192969 41.376562 38.735937 17.204687 0.000000 ] xS
732.78088 50 m
(/)s
ep
end
